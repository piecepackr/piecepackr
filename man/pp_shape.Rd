% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pp_shape.R
\name{pp_shape}
\alias{pp_shape}
\title{shape object}
\usage{
pp_shape(label = "rect", theta = 90, radius = 0.2, back = FALSE)
}
\arguments{
\item{label}{Label of the shape.}

\item{theta}{\code{convex} and \code{concave} polygon shapes
use this to determine where the first point is drawn.}

\item{radius}{\code{concave} polygon and \code{roundrect} use this
to control appearance of the shape.}

\item{back}{Whether the shape should be reflected across a vertical line.}
}
\description{
\code{pp_shape()} creates an R6 object with methods for creating various shape based grobs.
}
\details{
\code{pp_shape} objects serve the following purposes:\enumerate{
 \item{Make it easier for developers to customize game piece appearances
       either through a "grob_fn" or "op_grob_fn" styles in \code{pp_cfg()}
       or manipulate a piece post drawing via functions like \code{grid::grid.edit()}.}
 \item{Used internally to generate \code{piecepackr}'s built-in game piece grobs.}
  }
}
\section{\code{pp_shape} R6 Class Method Arguments}{
\describe{
\item{\code{mat_width}}{Numeric vector of mat widths}
\item{\code{name}}{Grid grob \code{name} value.}
\item{\code{gp}}{Grid \code{gpar} list.}
\item{\code{vp}}{Grid viewport or \code{NULL}.}
}
}

\section{\code{pp_shape} R6 Class Methods}{
\describe{
\item{\code{shape}}{Returns a grob of the shape.}
\item{\code{mat}}{Returns a grob for a matting \dQuote{mat} for that shape.}
\item{\code{checkers}}{Returns a grob of checkers for that shape.}
\item{\code{gridlines}}{Returns a grob of gridlines for that shape.}
\item{\code{hexlines}}{Returns a grob of hexlines for that shape.}
}
}

\examples{
 if (require("grid")) {
     gp <- gpar(col="black", fill="yellow")
     rect <- pp_shape(label="rect")
     convex6 <- pp_shape(label="convex6")
     circle <- pp_shape(label="circle")

     pushViewport(viewport(x=0.25, y=0.75, width=1/2, height=1/2))
     grid.draw(rect$shape(gp=gp))
     grid.draw(rect$gridlines(gp=gpar(col="blue", lex=4)))
     grid.draw(rect$hexlines(gp=gpar(col="green")))
     popViewport()

     pushViewport(viewport(x=0.75, y=0.75, width=1/2, height=1/2))
     grid.draw(convex6$shape(gp=gp))
     grid.draw(convex6$checkers(gp=gpar(fill="blue")))
     popViewport()

     pushViewport(viewport(x=0.25, y=0.25, width=1/2, height=1/2))
     grid.draw(circle$shape(gp=gp))
     grid.draw(circle$mat(mat_width=0.2, gp=gpar(fill="blue")))
     popViewport()

     pushViewport(viewport(x=0.75, y=0.25, width=1/2, height=1/2))
     grid.draw(rect$shape(gp=gp))
     grid.draw(rect$mat(mat_width=c(0.2, 0.1, 0.3, 0.4), gp=gpar(fill="blue")))
     popViewport()
 }
}
